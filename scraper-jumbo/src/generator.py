"""
M√≥dulo Generator - Generaci√≥n del archivo Markdown
"""

import os
from datetime import datetime
from typing import List, Dict, Any
from config import get_logger, get_config


logger = get_logger()
config = get_config()


def generate_markdown(categories: List[Dict[str, Any]], output_file: str) -> bool:
    """
    Genera el archivo Markdown con todas las categor√≠as y filtros

    Args:
        categories (List[Dict[str, Any]]): Lista de categor√≠as con filtros
        output_file (str): Ruta del archivo de salida

    Returns:
        bool: True si se gener√≥ exitosamente
    """
    logger.info(f"üìù Generando archivo Markdown: {output_file}")

    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            # Encabezado del archivo
            f.write("# Categorias\n")
            f.write("<!-- Generado autom√°ticamente por Scraper Jumbo -->\n")
            f.write(f"<!-- Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} -->\n")
            f.write(f"<!-- Total de categor√≠as: {len(categories)} -->\n\n")

            # Lista de categor√≠as
            for i, category in enumerate(categories, 1):
                f.write(f"{i}. {category['name']}: {category['url']}\n")

            f.write("\n## Filtros por Categor√≠a\n\n")

            # Secci√≥n de filtros por categor√≠a
            for category in categories:
                f.write(f"### {category['name']}\n")

                filters = category.get('filters', [])
                total_filters = len(filters)

                f.write(f"**Total de filtros: {total_filters}**\n")
                f.write("-- FiltrosCategory\n")
                f.write("Categor√≠a\n")
                f.write("Sub-Categor√≠a\n")
                f.write("-- Tipo de producto\n")
                f.write("Tipo de Producto\n")
                f.write("-- Subfiltros\n")

                # Filtros espec√≠ficos (excluyendo los base)
                for filter_name in filters[3:]:  # Saltar los 3 filtros base
                    f.write(f"{filter_name}\n")

                f.write("\n")

            # Pie de p√°gina con estad√≠sticas
            total_filters_all = sum(len(cat.get('filters', [])) for cat in categories)
            f.write("---\n\n")
            f.write("**Estad√≠sticas de la extracci√≥n:**\n")
            f.write(f"- Categor√≠as procesadas: {len(categories)}\n")
            f.write(f"- Total de filtros: {total_filters_all}\n")
            f.write(f"- Fecha de generaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"- Generado por: Scraper Jumbo v1.0\n")

        logger.info(f"‚úÖ Archivo Markdown generado exitosamente: {output_file}")
        logger.info(f"üìä Estad√≠sticas: {len(categories)} categor√≠as, {total_filters_all} filtros totales")

        return True

    except Exception as e:
        logger.error(f"‚ùå Error al generar archivo Markdown: {e}")
        return False


def generate_summary_report(categories: List[Dict[str, Any]], output_dir: str = "reports") -> bool:
    """
    Genera un reporte resumen de la extracci√≥n

    Args:
        categories (List[Dict[str, Any]]): Lista de categor√≠as procesadas
        output_dir (str): Directorio para el reporte

    Returns:
        bool: True si se gener√≥ exitosamente
    """
    logger.info("üìä Generando reporte resumen...")

    try:
        # Crear directorio si no existe
        os.makedirs(output_dir, exist_ok=True)

        report_file = os.path.join(output_dir, "extraction_report.txt")

        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("REPORTE DE EXTRACCI√ìN - SCRAPER JUNBO\n")
            f.write("=" * 50 + "\n\n")

            f.write(f"Fecha de extracci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Total de categor√≠as: {len(categories)}\n\n")

            # Estad√≠sticas por categor√≠a
            f.write("DETALLE POR CATEGOR√çA:\n")
            f.write("-" * 30 + "\n")

            total_filters = 0
            for category in categories:
                filters_count = len(category.get('filters', []))
                total_filters += filters_count
                f.write(f"{category['name']}: {filters_count} filtros\n")

            f.write(f"\nTOTAL DE FILTROS: {total_filters}\n")
        logger.info(f"‚úÖ Reporte generado: {report_file}")
        return True

    except Exception as e:
        logger.error(f"‚ùå Error al generar reporte: {e}")
        return False


def validate_generated_file(file_path: str) -> bool:
    """
    Valida que el archivo generado sea correcto

    Args:
        file_path (str): Ruta del archivo a validar

    Returns:
        bool: True si es v√°lido
    """
    logger.info(f"üîç Validando archivo generado: {file_path}")

    try:
        if not os.path.exists(file_path):
            logger.error("‚ùå Archivo no existe")
            return False

        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # Validaciones b√°sicas
        if len(content) < 100:
            logger.error("‚ùå Archivo demasiado peque√±o")
            return False

        if "# Categorias" not in content:
            logger.error("‚ùå Falta encabezado de categor√≠as")
            return False

        if "## Filtros por Categor√≠a" not in content:
            logger.error("‚ùå Falta secci√≥n de filtros")
            return False

        logger.info("‚úÖ Archivo validado correctamente")
        return True

    except Exception as e:
        logger.error(f"‚ùå Error al validar archivo: {e}")
        return False
